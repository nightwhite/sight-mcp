name: CI/CD Pipeline

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Run tests
        run: bun run test

      - name: Run integration tests
        run: bun run test:integration

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Build project
        run: bun run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 30

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Configure NPM registry
        run: |
          echo "@${{ github.repository_owner }}:registry=https://registry.npmjs.org/" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

      - name: Update package.json for publishing
        run: |
          # Update version to match release tag
          VERSION=$(echo ${{ github.ref_name }} | sed 's/^v//')
          bun package.json set version $VERSION

          # Ensure main field points to built file
          bun package.json set main dist/sight-mcp
          bun package.json set bin dist/sight-mcp
          bun package.json set files '["dist/**", "README.md", "LICENSE"]'
          bun package.json delete type
          bun package.json delete module

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-install-script:
    name: Create Install Script
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Create installation script
        run: |
          cat > install.sh << 'EOF'
          #!/bin/bash
          set -e

          PACKAGE_NAME="sight-mcp"
          VERSION="${{ github.ref_name }}"
          INSTALL_DIR="$HOME/bin"

          echo "Installing ${PACKAGE_NAME} v${VERSION}..."

          # Create install directory if it doesn't exist
          mkdir -p "$INSTALL_DIR"

          # Download and install
          if command -v npm >/dev/null 2>&1; then
            npm install -g ${PACKAGE_NAME}@${VERSION}
          elif command -v bun >/dev/null 2>&1; then
            cd /tmp
            bunx ${PACKAGE_NAME}@${VERSION} --help > /dev/null 2>&1 || true
            echo "Please use 'npm install -g ${PACKAGE_NAME}@${VERSION}' to install globally"
          else
            echo "Error: Neither npm nor bun found. Please install Node.js first."
            exit 1
          fi

          echo "Installation complete! The MCP server is now available."
          echo "Configure it in Claude Desktop config or use directly via MCP protocol."
          EOF

          chmod +x install.sh

      - name: Upload install script as release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./install.sh
          asset_name: install.sh
          asset_content_type: application/x-sh